Testing: ADD simple - 1 + 2 = 3\nREVM FFI: revm_set_code called with code_str: 0x600160020160005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x1b728b5e1b59e987b0bfc3080327bc4ef3f43ed96f1b2cb6c0246e1d3594fc58
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x1b728b5e1b59e987b0bfc3080327bc4ef3f43ed96f1b2cb6c0246e1d3594fc58
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000003) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000003
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x01 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x01
debug: [EVM] JumpTable.execute: Opcode 0x01 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 3
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 3
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000003
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 3 (gas: 21024)\n  Zig Output: 3 (gas: 124)\n  Match: true\nTesting: ADD overflow - MAX + 1 (overflow)\nREVM FFI: revm_set_code called with code_str: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010160005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 44, code_hash: 0x5010be736277bd4e95d7a1d34d1c2d02a801915951b8db9c14b8ac277cd06eb2
REVM FFI: Code successfully stored in contracts map, bytecode len: 44
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x5010be736277bd4e95d7a1d34d1c2d02a801915951b8db9c14b8ac277cd06eb2
REVM FFI: Code bytes len: 44
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=44
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=44
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=44
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=44, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x7f at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x7f
debug: [EVM] JumpTable.execute: Opcode 0x7f completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 33 bytes
debug: [EVM] Stack before pc=33: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=33, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=33, frame.pc=33, advancing by 2 bytes
debug: [EVM] Stack before pc=35: size=2, top 5 values:
debug: [EVM]   [1] = 1
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x01 at pc=35, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x01
debug: [EVM] JumpTable.execute: Opcode 0x01 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=35, frame.pc=35, advancing by 1 bytes
debug: [EVM] Stack before pc=36: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=36, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=36, frame.pc=36, advancing by 2 bytes
debug: [EVM] Stack before pc=38: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=38, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=38, frame.pc=38, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=39, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=39, frame.pc=39, advancing by 2 bytes
debug: [EVM] Stack before pc=41: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=41, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=41, frame.pc=41, advancing by 2 bytes
debug: [EVM] Stack before pc=43: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=43, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: MUL simple - 5 * 4 = 20\nREVM FFI: revm_set_code called with code_str: 0x600560040260005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xc038559572547a7903dbfd14f8e6fc6c882369df3542e2e0b01c618df5acc0d9
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xc038559572547a7903dbfd14f8e6fc6c882369df3542e2e0b01c618df5acc0d9
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000014) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000014
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 4
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x02 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x02
debug: [EVM] JumpTable.execute: Opcode 0x02 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 20
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 20
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000014
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 20 (gas: 21026)\n  Zig Output: 20 (gas: 126)\n  Match: true\nTesting: MUL overflow - MAX * 2 (overflow)\nREVM FFI: revm_set_code called with code_str: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020260005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 44, code_hash: 0xf2fc0c15ad2455a570451d80fabf5d377f31a876bbc5d49b1624a47ec3ee10b5
REVM FFI: Code successfully stored in contracts map, bytecode len: 44
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xf2fc0c15ad2455a570451d80fabf5d377f31a876bbc5d49b1624a47ec3ee10b5
REVM FFI: Code bytes len: 44
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe) }
REVM FFI: Call output length: 32, bytes: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=44
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=44
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=44
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=44, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x7f at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x7f
debug: [EVM] JumpTable.execute: Opcode 0x7f completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 33 bytes
debug: [EVM] Stack before pc=33: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=33, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=33, frame.pc=33, advancing by 2 bytes
debug: [EVM] Stack before pc=35: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x02 at pc=35, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x02
debug: [EVM] JumpTable.execute: Opcode 0x02 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=35, frame.pc=35, advancing by 1 bytes
debug: [EVM] Stack before pc=36: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639934
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=36, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=36, frame.pc=36, advancing by 2 bytes
debug: [EVM] Stack before pc=38: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639934
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=38, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=38, frame.pc=38, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=39, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=39, frame.pc=39, advancing by 2 bytes
debug: [EVM] Stack before pc=41: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=41, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=41, frame.pc=41, advancing by 2 bytes
debug: [EVM] Stack before pc=43: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=43, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 115792089237316195423570985008687907853269984665640564039457584007913129639934 (gas: 21026)\n  Zig Output: 115792089237316195423570985008687907853269984665640564039457584007913129639934 (gas: 126)\n  Match: true\nTesting: SUB simple - 10 - 5 = 5\nREVM FFI: revm_set_code called with code_str: 0x600a60050360005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x4c20d44e6f95bfd1f0fd18899bc3f7f8cbb0d8f1fc0a30c75e546d8427f37569
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x4c20d44e6f95bfd1f0fd18899bc3f7f8cbb0d8f1fc0a30c75e546d8427f37569
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb) }
REVM FFI: Call output length: 32, bytes: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 5
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x03 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x03
debug: [EVM] JumpTable.execute: Opcode 0x03 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639931
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639931
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 251 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 115792089237316195423570985008687907853269984665640564039457584007913129639931 (gas: 21024)\n  Zig Output: 115792089237316195423570985008687907853269984665640564039457584007913129639931 (gas: 124)\n  Match: true\nTesting: SUB underflow - 5 - 10 (underflow)\nREVM FFI: revm_set_code called with code_str: 0x6005600a0360005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x6cb245814d4deb056080a205966aa8596c3ea7806aa6884b4c53c69cb3a56c84
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x6cb245814d4deb056080a205966aa8596c3ea7806aa6884b4c53c69cb3a56c84
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000005) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000005
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x03 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x03
debug: [EVM] JumpTable.execute: Opcode 0x03 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000005
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 5 (gas: 21024)\n  Zig Output: 5 (gas: 124)\n  Match: true\nTesting: DIV simple - 10 / 2 = 5\nREVM FFI: revm_set_code called with code_str: 0x600a60020460005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x54854174da393fceb8c9552ce5b34c3523ec94ed184bc524313c9ec01b91bbdd
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x54854174da393fceb8c9552ce5b34c3523ec94ed184bc524313c9ec01b91bbdd
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x04 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x04
debug: [EVM] JumpTable.execute: Opcode 0x04 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21026)\n  Zig Output: 0 (gas: 126)\n  Match: true\nTesting: DIV by zero - 10 / 0 = 0\nREVM FFI: revm_set_code called with code_str: 0x600a60000460005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xb719de734f61ecbb27e453e90653d0cd095727e56196a7723adf6e441ef4780a
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xb719de734f61ecbb27e453e90653d0cd095727e56196a7723adf6e441ef4780a
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x04 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x04
debug: [EVM] JumpTable.execute: Opcode 0x04 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21026)\n  Zig Output: 0 (gas: 126)\n  Match: true\nTesting: SDIV simple - 10 / 2 = 5 (signed)\nREVM FFI: revm_set_code called with code_str: 0x600a60020560005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x62992c3271e72e97de53edbb43e1048b81ff58df54a7674b2bad0adaf33109b4
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x62992c3271e72e97de53edbb43e1048b81ff58df54a7674b2bad0adaf33109b4
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x05 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x05
debug: [EVM] JumpTable.execute: Opcode 0x05 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000005
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21026)\n  Zig Output: 5 (gas: 126)\n  Match: false\nTesting: MOD simple - 10 % 3 = 1\nREVM FFI: revm_set_code called with code_str: 0x600a60030660005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xa3fd79868280435d8b0a8b848430bf6fe6568be8a65cc30bd4111de412f0cbc1
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xa3fd79868280435d8b0a8b848430bf6fe6568be8a65cc30bd4111de412f0cbc1
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000003) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000003
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 3
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x06 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x06
debug: [EVM] JumpTable.execute: Opcode 0x06 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 3
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 3
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000003
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 3 (gas: 21026)\n  Zig Output: 3 (gas: 126)\n  Match: true\nTesting: SMOD simple - 10 % 3 = 1 (signed)\nREVM FFI: revm_set_code called with code_str: 0x600a60030760005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xfb5b73526ce83074778c5016027994fde6e1791f1ca4491a5315225c09d61da3
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xfb5b73526ce83074778c5016027994fde6e1791f1ca4491a5315225c09d61da3
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000003) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000003
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 3
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x07 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x07
debug: [EVM] JumpTable.execute: Opcode 0x07 completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 3 (gas: 21026)\n  Zig Output: 1 (gas: 126)\n  Match: false\nTesting: ADDMOD simple - (5 + 4) % 8 = 1\nREVM FFI: revm_set_code called with code_str: 0x6005600460080860005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 15, code_hash: 0x509f8f2a96a330f5b512fb959d25205a25a69094a25e4a1d7f11319c3d3f84ec
REVM FFI: Code successfully stored in contracts map, bytecode len: 15
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x509f8f2a96a330f5b512fb959d25205a25a69094a25e4a1d7f11319c3d3f84ec
REVM FFI: Code bytes len: 15
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21032, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000002) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000002
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21032, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=15
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=15
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=15
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=15, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 4
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 2 bytes
debug: [EVM] Stack before pc=6: size=3, top 5 values:
debug: [EVM]   [2] = 8
debug: [EVM]   [1] = 4
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x08 at pc=6, gas=999891, stack_size=3
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=3, min_required=3, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 8 gas for opcode 0x08
debug: [EVM] JumpTable.execute: Opcode 0x08 completed, gas_remaining=999883
debug: [EVM] interpret: PC unchanged by opcode - pc=6, frame.pc=6, advancing by 1 bytes
debug: [EVM] Stack before pc=7: size=1, top 5 values:
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=7, gas=999883, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 2 bytes
debug: [EVM] Stack before pc=9: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=9, gas=999880, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=9, frame.pc=9, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999874, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999871
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=12, gas=999871, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999868
debug: [EVM] interpret: PC unchanged by opcode - pc=12, frame.pc=12, advancing by 2 bytes
debug: [EVM] Stack before pc=14: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=14, gas=999868, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000002
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=32, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=32, gas_left=999868, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 2 (gas: 21032)\n  Zig Output: 2 (gas: 132)\n  Match: true\nTesting: ADDMOD MAX+MAX%MAX - (MAX + MAX) % MAX\nREVM FFI: revm_set_code called with code_str: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0860005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 110, code_hash: 0x7d6ed6cd7b73e1c4f73552676e23b6a24d9fd712ad70ea605d82be4c18a0ee1d
REVM FFI: Code successfully stored in contracts map, bytecode len: 110
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x7d6ed6cd7b73e1c4f73552676e23b6a24d9fd712ad70ea605d82be4c18a0ee1d
REVM FFI: Code bytes len: 110
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: SelfDestruct, gas_used: 28606, gas_refunded: 0, logs: [], output: Call(0x) }
REVM FFI: Call output length: 0, bytes: 0x
REVM FFI: Creating result with output length: 0
  REVM execution result: success=true, gas_used=28606, output_len=0
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=110
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=110
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=110
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=110, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x7f at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x7f
debug: [EVM] JumpTable.execute: Opcode 0x7f completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 33 bytes
debug: [EVM] Stack before pc=33: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x7f at pc=33, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x7f
debug: [EVM] JumpTable.execute: Opcode 0x7f completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=33, frame.pc=33, advancing by 33 bytes
debug: [EVM] Stack before pc=66: size=2, top 5 values:
debug: [EVM]   [1] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0xff at pc=66, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=1, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5000 gas for opcode 0xff
debug: [EVM] EvmState.mark_for_destruction: contract=3300000000000000000000000000000000000000, recipient=ffffffffffffffffffffffffffffffffffffffff
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=0
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=0, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output=null
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=7606, output_size=0
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=7606, gas_left=992294, output_size=0
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 28606)\n  Zig Output: 0 (gas: 7706)\n  Match: true\nTesting: MULMOD simple - (10 * 10) % 8 = 4\nREVM FFI: revm_set_code called with code_str: 0x600a600a60080960005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 15, code_hash: 0x78ec7fdd981e2f32663746e45c6cf40e913f5e056022fa16dbb0d278088952eb
REVM FFI: Code successfully stored in contracts map, bytecode len: 15
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x78ec7fdd981e2f32663746e45c6cf40e913f5e056022fa16dbb0d278088952eb
REVM FFI: Code bytes len: 15
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21032, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21032, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=15
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=15
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=15
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=15, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 2 bytes
debug: [EVM] Stack before pc=6: size=3, top 5 values:
debug: [EVM]   [2] = 8
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x09 at pc=6, gas=999891, stack_size=3
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=3, min_required=3, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 8 gas for opcode 0x09
debug: [EVM] JumpTable.execute: Opcode 0x09 completed, gas_remaining=999883
debug: [EVM] interpret: PC unchanged by opcode - pc=6, frame.pc=6, advancing by 1 bytes
debug: [EVM] Stack before pc=7: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=7, gas=999883, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 2 bytes
debug: [EVM] Stack before pc=9: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=9, gas=999880, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=9, frame.pc=9, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999874, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999871
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=12, gas=999871, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999868
debug: [EVM] interpret: PC unchanged by opcode - pc=12, frame.pc=12, advancing by 2 bytes
debug: [EVM] Stack before pc=14: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=14, gas=999868, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=32, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=32, gas_left=999868, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21032)\n  Zig Output: 0 (gas: 132)\n  Match: true\nTesting: MULMOD MAX*2%3 - (MAX * 2) % 3\nREVM FFI: revm_set_code called with code_str: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260030960005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 46, code_hash: 0x99101ea5cdeece6e22f741d42fc816db14e751d61c1d4125dfbffd6eae655da7
REVM FFI: Code successfully stored in contracts map, bytecode len: 46
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x99101ea5cdeece6e22f741d42fc816db14e751d61c1d4125dfbffd6eae655da7
REVM FFI: Code bytes len: 46
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21032, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000006) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000006
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21032, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=46
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=46
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=46
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=46, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x7f at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x7f
debug: [EVM] JumpTable.execute: Opcode 0x7f completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 33 bytes
debug: [EVM] Stack before pc=33: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=33, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=33, frame.pc=33, advancing by 2 bytes
debug: [EVM] Stack before pc=35: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=35, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=35, frame.pc=35, advancing by 2 bytes
debug: [EVM] Stack before pc=37: size=3, top 5 values:
debug: [EVM]   [2] = 3
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x09 at pc=37, gas=999891, stack_size=3
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=3, min_required=3, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 8 gas for opcode 0x09
debug: [EVM] JumpTable.execute: Opcode 0x09 completed, gas_remaining=999883
debug: [EVM] interpret: PC unchanged by opcode - pc=37, frame.pc=37, advancing by 1 bytes
debug: [EVM] Stack before pc=38: size=1, top 5 values:
debug: [EVM]   [0] = 6
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=38, gas=999883, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=38, frame.pc=38, advancing by 2 bytes
debug: [EVM] Stack before pc=40: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 6
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=40, gas=999880, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=40, frame.pc=40, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=41, gas=999874, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999871
debug: [EVM] interpret: PC unchanged by opcode - pc=41, frame.pc=41, advancing by 2 bytes
debug: [EVM] Stack before pc=43: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=43, gas=999871, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999868
debug: [EVM] interpret: PC unchanged by opcode - pc=43, frame.pc=43, advancing by 2 bytes
debug: [EVM] Stack before pc=45: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=45, gas=999868, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000006
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=32, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=32, gas_left=999868, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 6 (gas: 21032)\n  Zig Output: 6 (gas: 132)\n  Match: true\nTesting: EXP simple - 2 ** 3 = 8\nREVM FFI: revm_set_code called with code_str: 0x600260030a60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x67a6736bef3dd624bec9192090821bc8af76b54235c83f7ffc77b11cc52a008b
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x67a6736bef3dd624bec9192090821bc8af76b54235c83f7ffc77b11cc52a008b
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21081, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000009) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000009
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21081, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 3
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x0a at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 10 gas for opcode 0x0a
debug: [EVM] EXP: base=3, exp=2
debug: [EVM] JumpTable.execute: Opcode 0x0a completed, gas_remaining=999834
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 9
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999834, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999831
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 9
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999831, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999825
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999825, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999822
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999822, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999819
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999819, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000009
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=81, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=81, gas_left=999819, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 9 (gas: 21081)\n  Zig Output: 9 (gas: 181)\n  Match: true\nTesting: EXP 0^0 - 0 ** 0 = 1\nREVM FFI: revm_set_code called with code_str: 0x600060000a60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xdfcbad4b7d42bb4b81751664f2a7faadc8429be2205317ae184a982ddc163be8
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xdfcbad4b7d42bb4b81751664f2a7faadc8429be2205317ae184a982ddc163be8
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21031, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21031, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x0a at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 10 gas for opcode 0x0a
debug: [EVM] EXP: base=0, exp=0
debug: [EVM] JumpTable.execute: Opcode 0x0a completed, gas_remaining=999884
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999884, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999881
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999881, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999875
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999875, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999872
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999872, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999869
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999869, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=31, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=31, gas_left=999869, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21031)\n  Zig Output: 1 (gas: 131)\n  Match: true\nTesting: SIGNEXTEND simple - Sign extend 0xff with size 1\nREVM FFI: revm_set_code called with code_str: 0x600160ff0b60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xcc9249cd52c1bab72295c0463adc423855fa875a41c42942f9962ef452a714bf
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xcc9249cd52c1bab72295c0463adc423855fa875a41c42942f9962ef452a714bf
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21026, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21026, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 255
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x0b at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 5 gas for opcode 0x0b
debug: [EVM] JumpTable.execute: Opcode 0x0b completed, gas_remaining=999889
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999889, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999886
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999886, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999880
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999880, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999877
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999877, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999874
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999874, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 00000000000000000000000000000000000000000000000000000000000000ff
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=26, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=26, gas_left=999874, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21026)\n  Zig Output: 255 (gas: 126)\n  Match: false\nTesting: LT true - 5 < 10 = 1\nREVM FFI: revm_set_code called with code_str: 0x6005600a1060005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xbde731fef293107575a84b1b4e69948e3157417952455c24cb6c6cf6d0459191
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xbde731fef293107575a84b1b4e69948e3157417952455c24cb6c6cf6d0459191
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x10 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x10
debug: [EVM] LT: a=5, b=10, result=0 (b < a = false)
debug: [EVM] JumpTable.execute: Opcode 0x10 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: LT false - 10 < 5 = 0\nREVM FFI: revm_set_code called with code_str: 0x600a60051060005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x9a261809ccd7d52518506c8f1b84abe6d1324283dcd889f77bc7399e15b6c90f
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x9a261809ccd7d52518506c8f1b84abe6d1324283dcd889f77bc7399e15b6c90f
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 5
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x10 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x10
debug: [EVM] LT: a=10, b=5, result=1 (b < a = true)
debug: [EVM] JumpTable.execute: Opcode 0x10 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21024)\n  Zig Output: 1 (gas: 124)\n  Match: true\nTesting: GT true - 10 > 5 = 1\nREVM FFI: revm_set_code called with code_str: 0x600a60051160005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x05922fa4c88546fcd0c6e7f306e83b9710173c19498269f86e6e56a75702f66b
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x05922fa4c88546fcd0c6e7f306e83b9710173c19498269f86e6e56a75702f66b
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 5
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x11 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x11
debug: [EVM] GT: a=10, b=5, result=0 (b > a = false)
debug: [EVM] JumpTable.execute: Opcode 0x11 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: GT false - 5 > 10 = 0\nREVM FFI: revm_set_code called with code_str: 0x6005600a1160005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x9f4b49f9b17f2ae25e406e4a0fe3ae3722d7c97e846551c58c07076586f91925
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x9f4b49f9b17f2ae25e406e4a0fe3ae3722d7c97e846551c58c07076586f91925
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x11 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x11
debug: [EVM] GT: a=5, b=10, result=1 (b > a = true)
debug: [EVM] JumpTable.execute: Opcode 0x11 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21024)\n  Zig Output: 1 (gas: 124)\n  Match: true\nTesting: SLT true - 5 < 10 = 1 (signed)\nREVM FFI: revm_set_code called with code_str: 0x6005600a1260005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x96217e2ca546d3c19da48fe623572a701c00611ee2ac6fcba1a9c01b88c66505
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x96217e2ca546d3c19da48fe623572a701c00611ee2ac6fcba1a9c01b88c66505
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x12 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x12
debug: [EVM] JumpTable.execute: Opcode 0x12 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: SGT true - 10 > 5 = 1 (signed)\nREVM FFI: revm_set_code called with code_str: 0x600a60051360005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x3b539effe249cf5ad977966f8961385e730b6ffa14be88b238546313b3e1289b
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x3b539effe249cf5ad977966f8961385e730b6ffa14be88b238546313b3e1289b
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 5
debug: [EVM]   [0] = 10
debug: [EVM] JumpTable.execute: Executing opcode 0x13 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x13
debug: [EVM] JumpTable.execute: Opcode 0x13 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: EQ true - 5 == 5 = 1\nREVM FFI: revm_set_code called with code_str: 0x600560051460005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xd7309acb7392a70f0fd8ae61a6dbce88acdeff0c394592f74d1038ff5f2ed92c
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xd7309acb7392a70f0fd8ae61a6dbce88acdeff0c394592f74d1038ff5f2ed92c
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 5
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x14 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x14
debug: [EVM] JumpTable.execute: Opcode 0x14 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21024)\n  Zig Output: 1 (gas: 124)\n  Match: true\nTesting: EQ false - 5 == 10 = 0\nREVM FFI: revm_set_code called with code_str: 0x6005600a1460005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x877b8c8685820ad9b22bc6da0ca5087e7ed943ac54c21777b7c8f26b6bcf9a3f
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x877b8c8685820ad9b22bc6da0ca5087e7ed943ac54c21777b7c8f26b6bcf9a3f
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 10
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x14 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x14
debug: [EVM] JumpTable.execute: Opcode 0x14 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: ISZERO true - 0 == 0 = 1\nREVM FFI: revm_set_code called with code_str: 0x60001560005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 11, code_hash: 0xa7a874a4ce991a91478f972a2c34114b5c00fede65cdc22f894310665e7345f7
REVM FFI: Code successfully stored in contracts map, bytecode len: 11
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xa7a874a4ce991a91478f972a2c34114b5c00fede65cdc22f894310665e7345f7
REVM FFI: Code bytes len: 11
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21021, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000001) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000001
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21021, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=11
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=11, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x15 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=1, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x15
debug: [EVM] ISZERO: value=0, result=1 (value == 0 = true)
debug: [EVM] JumpTable.execute: Opcode 0x15 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 1 bytes
debug: [EVM] Stack before pc=3: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=3, gas=999894, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=3, frame.pc=3, advancing by 2 bytes
debug: [EVM] Stack before pc=5: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=5, gas=999891, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999885
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=6, gas=999885, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=6, frame.pc=6, advancing by 2 bytes
debug: [EVM] Stack before pc=8: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=10, gas=999879, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000001
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=21, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=21, gas_left=999879, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 1 (gas: 21021)\n  Zig Output: 1 (gas: 121)\n  Match: true\nTesting: ISZERO false - 5 == 0 = 0\nREVM FFI: revm_set_code called with code_str: 0x60051560005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 11, code_hash: 0xb29de8aaed813855ece9b2690a83e66257998680225063e335599c4b095d535b
REVM FFI: Code successfully stored in contracts map, bytecode len: 11
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xb29de8aaed813855ece9b2690a83e66257998680225063e335599c4b095d535b
REVM FFI: Code bytes len: 11
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21021, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21021, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=11
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=11, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 5
debug: [EVM] JumpTable.execute: Executing opcode 0x15 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=1, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x15
debug: [EVM] ISZERO: value=5, result=0 (value == 0 = false)
debug: [EVM] JumpTable.execute: Opcode 0x15 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 1 bytes
debug: [EVM] Stack before pc=3: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=3, gas=999894, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=3, frame.pc=3, advancing by 2 bytes
debug: [EVM] Stack before pc=5: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=5, gas=999891, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999885
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=6, gas=999885, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=6, frame.pc=6, advancing by 2 bytes
debug: [EVM] Stack before pc=8: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=10, gas=999879, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=21, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=21, gas_left=999879, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21021)\n  Zig Output: 0 (gas: 121)\n  Match: true\nTesting: AND - 0x0f & 0xf0 = 0x00\nREVM FFI: revm_set_code called with code_str: 0x600f60f01660005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xdc21dfa51b4d368cf5bec9c1d6be3b67e8864647318c4df31e0cded4f6a903df
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xdc21dfa51b4d368cf5bec9c1d6be3b67e8864647318c4df31e0cded4f6a903df
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 15
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 240
debug: [EVM]   [0] = 15
debug: [EVM] JumpTable.execute: Executing opcode 0x16 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x16
debug: [EVM] JumpTable.execute: Opcode 0x16 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: OR - 0x0f | 0xf0 = 0xff\nREVM FFI: revm_set_code called with code_str: 0x600f60f01760005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x2ebaea0cff8aec0b237b43d2eede1fded2ffb3ab0ce3a609daae6626a18d3227
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x2ebaea0cff8aec0b237b43d2eede1fded2ffb3ab0ce3a609daae6626a18d3227
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x00000000000000000000000000000000000000000000000000000000000000ff) }
REVM FFI: Call output length: 32, bytes: 0x00000000000000000000000000000000000000000000000000000000000000ff
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 15
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 240
debug: [EVM]   [0] = 15
debug: [EVM] JumpTable.execute: Executing opcode 0x17 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x17
debug: [EVM] JumpTable.execute: Opcode 0x17 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 00000000000000000000000000000000000000000000000000000000000000ff
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 255 (gas: 21024)\n  Zig Output: 255 (gas: 124)\n  Match: true\nTesting: XOR - 0xff ^ 0x0f = 0xf0\nREVM FFI: revm_set_code called with code_str: 0x60ff600f1860005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x88f8083a8330ff0157a4d17a5374c80447aa5fac984660d4e34097353974d319
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x88f8083a8330ff0157a4d17a5374c80447aa5fac984660d4e34097353974d319
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x00000000000000000000000000000000000000000000000000000000000000f0) }
REVM FFI: Call output length: 32, bytes: 0x00000000000000000000000000000000000000000000000000000000000000f0
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 15
debug: [EVM]   [0] = 255
debug: [EVM] JumpTable.execute: Executing opcode 0x18 at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x18
debug: [EVM] JumpTable.execute: Opcode 0x18 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 240
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 240
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 00000000000000000000000000000000000000000000000000000000000000f0
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 240 (gas: 21024)\n  Zig Output: 240 (gas: 124)\n  Match: true\nTesting: NOT - ~0 = MAX\nREVM FFI: revm_set_code called with code_str: 0x60001960005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 11, code_hash: 0x22cd62a9b549cd61596b16e73fd616bed9dd8e2f72bc6d3c88f5062b8b7faa33
REVM FFI: Code successfully stored in contracts map, bytecode len: 11
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x22cd62a9b549cd61596b16e73fd616bed9dd8e2f72bc6d3c88f5062b8b7faa33
REVM FFI: Code bytes len: 11
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21021, gas_refunded: 0, logs: [], output: Call(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) }
REVM FFI: Call output length: 32, bytes: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21021, output_len=32
  REVM output bytes: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=11
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=11
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=11, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x19 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=1, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x19
debug: [EVM] JumpTable.execute: Opcode 0x19 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 1 bytes
debug: [EVM] Stack before pc=3: size=1, top 5 values:
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=3, gas=999894, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=3, frame.pc=3, advancing by 2 bytes
debug: [EVM] Stack before pc=5: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=5, gas=999891, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999885
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=6, gas=999885, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=6, frame.pc=6, advancing by 2 bytes
debug: [EVM] Stack before pc=8: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=10, gas=999879, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=21, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=21, gas_left=999879, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 115792089237316195423570985008687907853269984665640564039457584007913129639935 (gas: 21021)\n  Zig Output: 115792089237316195423570985008687907853269984665640564039457584007913129639935 (gas: 121)\n  Match: true\nTesting: BYTE - Get byte 31 of 0xff = 0xff\nREVM FFI: revm_set_code called with code_str: 0x601f60ff1a60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x28c777ba221891393e6b490b4f7412565657ffb0172f1e91a2f9b2c48c7f412b
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x28c777ba221891393e6b490b4f7412565657ffb0172f1e91a2f9b2c48c7f412b
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 31
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 255
debug: [EVM]   [0] = 31
debug: [EVM] JumpTable.execute: Executing opcode 0x1a at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x1a
debug: [EVM] JumpTable.execute: Opcode 0x1a completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: SHL - 1 << 1 = 2\nREVM FFI: revm_set_code called with code_str: 0x600160011b60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x44006364ad4492f910567833a8fbc1028494d6bb6cc77f9ef190a378dfdacc64
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x44006364ad4492f910567833a8fbc1028494d6bb6cc77f9ef190a378dfdacc64
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000002) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000002
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 1
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x1b at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x1b
debug: [EVM] JumpTable.execute: Opcode 0x1b completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 2
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000002
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 2 (gas: 21024)\n  Zig Output: 2 (gas: 124)\n  Match: true\nTesting: SHR - 2 >> 1 = 1\nREVM FFI: revm_set_code called with code_str: 0x600160021c60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0x0c23950556f9e71af04783bb94d8ec6dfcfd3f11a9e9f866d5ce91b83e536038
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0x0c23950556f9e71af04783bb94d8ec6dfcfd3f11a9e9f866d5ce91b83e536038
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x1c at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x1c
debug: [EVM] JumpTable.execute: Opcode 0x1c completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\nTesting: SAR - 2 >> 1 = 1 (arithmetic)\nREVM FFI: revm_set_code called with code_str: 0x600160021d60005260206000f3
REVM FFI: Set code for 0x3300000000000000000000000000000000000000, code_len: 13, code_hash: 0xc2833495063dee5b6b35140db045f8a9d49112698e1a21739e6e2c1e0a1f3705
REVM FFI: Code successfully stored in contracts map, bytecode len: 13
REVM FFI: Account at 0x3300000000000000000000000000000000000000 has code: true, code_hash: 0xc2833495063dee5b6b35140db045f8a9d49112698e1a21739e6e2c1e0a1f3705
REVM FFI: Code bytes len: 13
REVM FFI: About to execute transaction - from: 0x1100000000000000000000000000000000000000, to: Some(0x3300000000000000000000000000000000000000), value: 0, input_len: 0, gas_limit: 1000000
REVM FFI: Transaction succeeded
REVM FFI: Result type: Success { reason: Return, gas_used: 21024, gas_refunded: 0, logs: [], output: Call(0x0000000000000000000000000000000000000000000000000000000000000000) }
REVM FFI: Call output length: 32, bytes: 0x0000000000000000000000000000000000000000000000000000000000000000
REVM FFI: Creating result with output length: 32
  REVM execution result: success=true, gas_used=21024, output_len=32
  REVM output bytes: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
debug: [EVM] Evm.init: Initializing EVM with configuration
debug: [EVM] EvmState.init: Initializing EVM state with database interface
debug: [EVM] EvmState.init: EVM state initialization complete
debug: [EVM] Evm.init: EVM initialization complete
debug: [EVM] EvmState.set_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] EvmState.set_balance: addr=1100000000000000000000000000000000000000, balance=115792089237316195423570985008687907853269984665640564039457584007913129639935
debug: [EVM] VM.call_contract: Call from { 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, gas=1000000, static=false
debug: [EVM] VM.call_contract: Regular contract call to { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] EvmState.get_code: addr=3300000000000000000000000000000000000000, code_len=13
debug: [EVM] VM.call_contract: Got code for { 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, len=13
debug: [EVM] VM.call_contract: Starting execution with gas=1000000, intrinsic_gas=100, execution_gas=999900
debug: [EVM] VM.call_contract: About to execute contract with gas=999900
debug: [EVM] VM.interpret: Starting execution, depth=0, gas=999900, static=false, code_size=13, input_size=0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=0, gas=999900, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999897
debug: [EVM] interpret: PC unchanged by opcode - pc=0, frame.pc=0, advancing by 2 bytes
debug: [EVM] Stack before pc=2: size=1, top 5 values:
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=2, gas=999897, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999894
debug: [EVM] interpret: PC unchanged by opcode - pc=2, frame.pc=2, advancing by 2 bytes
debug: [EVM] Stack before pc=4: size=2, top 5 values:
debug: [EVM]   [1] = 2
debug: [EVM]   [0] = 1
debug: [EVM] JumpTable.execute: Executing opcode 0x1d at pc=4, gas=999894, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x1d
debug: [EVM] JumpTable.execute: Opcode 0x1d completed, gas_remaining=999891
debug: [EVM] interpret: PC unchanged by opcode - pc=4, frame.pc=4, advancing by 1 bytes
debug: [EVM] Stack before pc=5: size=1, top 5 values:
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=5, gas=999891, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999888
debug: [EVM] interpret: PC unchanged by opcode - pc=5, frame.pc=5, advancing by 2 bytes
debug: [EVM] Stack before pc=7: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 0
debug: [EVM] JumpTable.execute: Executing opcode 0x52 at pc=7, gas=999888, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x52
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Expanding buffer from 0 to 32 bytes
debug: [EVM] Memory.ensure_context_capacity: Expansion complete, old_words=0, new_words=1, words_added=1
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] JumpTable.execute: Opcode 0x52 completed, gas_remaining=999882
debug: [EVM] interpret: PC unchanged by opcode - pc=7, frame.pc=7, advancing by 1 bytes
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=8, gas=999882, stack_size=0
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=0, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999879
debug: [EVM] interpret: PC unchanged by opcode - pc=8, frame.pc=8, advancing by 2 bytes
debug: [EVM] Stack before pc=10: size=1, top 5 values:
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0x60 at pc=10, gas=999879, stack_size=1
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=1, min_required=0, max_allowed=1023
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] JumpTable.execute: Consuming 3 gas for opcode 0x60
debug: [EVM] JumpTable.execute: Opcode 0x60 completed, gas_remaining=999876
debug: [EVM] interpret: PC unchanged by opcode - pc=10, frame.pc=10, advancing by 2 bytes
debug: [EVM] Stack before pc=12: size=2, top 5 values:
debug: [EVM]   [1] = 0
debug: [EVM]   [0] = 32
debug: [EVM] JumpTable.execute: Executing opcode 0xf3 at pc=12, gas=999876, stack_size=2
debug: [EVM] StackValidation.validate_stack_requirements: Validating stack, size=2, min_required=2, max_allowed=1024
debug: [EVM] StackValidation.validate_stack_requirements: Validation passed
debug: [EVM] RETURN opcode: offset=0, size=32
debug: [EVM] Memory.ensure_context_capacity: Ensuring capacity, min_context_size=32, required_total_len=32, memory_limit=33554432
debug: [EVM] Memory.ensure_context_capacity: Buffer already large enough, no expansion needed
debug: [EVM] RETURN reading 32 bytes from memory[0..32]
debug: [EVM] RETURN data: 0000000000000000000000000000000000000000000000000000000000000000
debug: [EVM] RETURN data set to frame.output, size: 32
debug: [EVM] RETURN opcode complete, about to return STOP error
debug: [EVM] VM.interpret_with_context: Error occurred: error.STOP, output_size=32
debug: [EVM] VM.interpret_with_context: Duplicated output, size=32
debug: [EVM] VM.interpret_with_context: STOP opcode, output_size=32, creating RunResult
debug: [EVM] VM.interpret_with_context: RunResult created, output={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
debug: [EVM] VM.call_contract: Execution completed, status=evm.run_result.Status.Success, gas_used=24, output_size=32
debug: [EVM] VM.call_contract: Call completed, success=true, gas_used=24, gas_left=999876, output_size=32
debug: [EVM] EvmState.deinit: Cleaning up EVM state, logs_count=0
debug: [EVM] EvmState.deinit: EVM state cleanup complete
  REVM Output: 0 (gas: 21024)\n  Zig Output: 0 (gas: 124)\n  Match: true\n\n=== Summary ===\nTotal: 36 | Passing: 33 (91.7%) | Failing: 3\nResults written to opcode_implementation_status.md\n