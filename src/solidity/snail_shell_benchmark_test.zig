const std = @import("std");
const expect = std.testing.expect;
const evm = @import("evm");

test "SnailShellBenchmark bytecode validation" {
    const allocator = std.testing.allocator;

    // Pre-compiled bytecode for SnailShellBenchmark constructor (simplified version)
    // This would normally be generated by compiling the Solidity contract
    const constructor_bytecode = "608060405234801561001057600080fd5b50610100565b6101008061001f6000396000f3fe";

    // Convert hex string to bytes
    const bytecode_len = constructor_bytecode.len / 2;
    const bytecode = try allocator.alloc(u8, bytecode_len);
    defer allocator.free(bytecode);

    _ = try std.fmt.hexToBytes(bytecode, constructor_bytecode);

    // Verify bytecode is valid
    try expect(bytecode.len > 0);
}

test "SnailShellBenchmark EVM execution" {
    std.testing.log_level = .warn;
    const allocator = std.testing.allocator;
    var memory_db = evm.MemoryDatabase.init(allocator);
    defer memory_db.deinit();
    const db_interface = memory_db.to_database_interface();
    var vm = try evm.Evm.init(
        allocator,
        db_interface,
        null, // table
        null, // chain_rules
        null, // context
        0, // depth
        false, // read_only
        null, // tracer
    );
    defer vm.deinit();
    const simple_benchmark_bytecode = "608060405234801561001057600080fd5b50610100565b6101008061001f6000396000f3fe";
    const bytecode_len = simple_benchmark_bytecode.len / 2;
    const bytecode = try allocator.alloc(u8, bytecode_len);
    defer allocator.free(bytecode);

    _ = try std.fmt.hexToBytes(bytecode, simple_benchmark_bytecode);
    const contract_obj = evm.Contract.init(
        evm.primitives.Address.ZERO, // caller
        evm.primitives.Address.ZERO, // address
        0, // value
        10000000, // gas
        bytecode, // code
        [_]u8{0} ** 32, // code_hash
        &.{}, // input
        false, // is_static
    );
    var contract_obj_mut = contract_obj;
    var frame = try evm.Frame.init(allocator, &contract_obj_mut);
    defer frame.deinit(allocator);
    const stack_size = frame.stack.size;
    const memory_size = frame.memory.context_size();
    try expect(stack_size == 0);
    try expect(memory_size == 0);
}
